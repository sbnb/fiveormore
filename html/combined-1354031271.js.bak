/**
 * jQuery Horizontal Navigation 1.0
 * https://github.com/sebnitu/horizontalNav
 *
 * By Sebastian Nitu - Copyright 2012 - All rights reserved
 * Author URL: http://sebnitu.com
 */
(function($) {

    $.fn.horizontalNav = function(options) {

        // Extend our default options with those provided.
        var opts = $.extend({}, $.fn.horizontalNav.defaults, options);

        return this.each(function () {

            // Save our object
            var $this = $(this);

            // Build element specific options
            // This lets me access options with this syntax: o.optionName
            var o = $.meta ? $.extend({}, opts, $this.data()) : opts;

            // Save the wrapper. The wrapper is the element that
            // we figure out what the full width should be
            if ($this.is('ul')) {
                var ul_wrap = $this.parent();
            } else {
                var ul_wrap = $this;
            }

            // Grab elements we'll need and add some default styles
            var ul = $this.is('ul') ? $this : ul_wrap.find('> ul'), // The unordered list element
                li = ul.find('> li'), // All list items
                li_last = li.last(), // Last list item
                li_count = li.size(), // The number of navigation elements
                li_a = li.find('> a'); // Remove padding from the links

            if (o.minimumItems && o.minimumItems > li_count) {
                $this.addClass("horizontalNav-notprocessed");
                return false;
            }

            // If set to responsive, re-construct after every browser resize
            if ( o.responsive === true ) {
                // Only need to do this for IE7 and below
                // or if we set tableDisplay to false
                if ( (o.tableDisplay != true) || ($.browser.msie && parseInt($.browser.version, 10) <= 7) ) {
                    resizeTrigger( _construct, o.responsiveDelay );
                }
            }

            if ($('.clearHorizontalNav').length ) {
                ul_wrap.css({ 'zoom' : '1' });
            } else {
                ul_wrap.css({ 'zoom' : '1' }).append('<div class="clearHorizontalNav">');
                // let's append a clearfixing element to the ul wrapper
                $('.clearHorizontalNav').css({
                'display' : 'block',
                'overflow' : 'hidden',
                'visibility' : 'hidden',
                'width' : 0,
                'height' : 0,
                'clear' : 'both'
                });
            }

            // Initiate the plugin
            _construct();

            // Returns the true inner width of an element
            // Essentially it's the inner width without padding.
            function trueInnerWidth(element) {
                return element.innerWidth() - (
                    parseInt(element.css('padding-left')) + parseInt(element.css('padding-right'))
                );
            }

            // Call funcion on browser resize
            function resizeTrigger(callback, delay) {
                // Delay before function is called
                delay = delay || 100;
                // Call function on resize
                var resizeTimer;
                $(window).resize(function() {
                    clearTimeout(resizeTimer);
                    resizeTimer = setTimeout(function() {
                        callback();
                    }, delay);
                });
            }

            // The heavy lifting of this plugin. This is where we
            // find and set the appropriate widths for list items
            function _construct() {

                if ( (o.tableDisplay != true) || ($.browser.msie && parseInt($.browser.version, 10) <= 7) ) {

                    // IE7 doesn't support the "display: table" method
                    // so we need to do it the hard way.

                    // Add some styles
                    ul.css({ 'float' : 'left' });
                    li.css({ 'float' : 'left', 'width' : 'auto' });
                    li_a.css({ 'padding-left' : 0, 'padding-right' : 0 });

                    // Grabbing widths and doing some math
                    var ul_width = trueInnerWidth(ul),
                        ul_width_outer = ul.outerWidth(true),
                        ul_width_extra = ul_width_outer - ul_width,

                        full_width = trueInnerWidth(ul_wrap),
                        extra_width = (full_width - ul_width_extra) - ul_width,
                        li_padding = Math.floor( extra_width / li_count );

                    // Cycle through the list items and give them widths
                    li.each(function(index) {
                        var li_width = trueInnerWidth( $(this) );
                        $(this).css({ 'width' : (li_width + li_padding) + 'px' });
                    });

                    // Get the leftover pixels after we set every itms width
                    var li_last_width = trueInnerWidth(li_last) + ( (full_width - ul_width_extra) - trueInnerWidth(ul) );
                    // I hate to do this but for some reason Firefox (v13.0) and IE are always
                    // one pixel off when rendering. So this is a quick fix for that.
                    if ($.browser.mozilla || $.browser.msie) {
                        li_last_width = li_last_width - 1;
                    }
                    // Add the leftovers to the last navigation item
                    li_last.css({ 'width' : li_last_width + 'px' });

                } else {
                    // Every modern browser supports the "display: table" method
                    // so this is the best way to do it for them.
                    ul.css({ 'display' : 'table', 'float' : 'none', 'width' : '100%' });
                    li.css({ 'display' : 'table-cell', 'float' : 'none' });
                }
                $this.addClass("horizontalNav-processed").removeClass("horizontalNav-notprocessed");
            }

        }); // @end of return this.each()

    };

    $.fn.horizontalNav.defaults = {
        responsive : true,
        responsiveDelay : 100,
        tableDisplay : true,
        minimumItems : 0
    };

})(jQuery);

/*
    http://www.JSON.org/json2.js
    2011-10-19

    Public Domain.

    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.

    See http://www.JSON.org/js.html


    This code should be minified before deployment.
    See http://javascript.crockford.com/jsmin.html

    USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO
    NOT CONTROL.


    This file creates a global JSON object containing two methods: stringify
    and parse.

        JSON.stringify(value, replacer, space)
            value       any JavaScript value, usually an object or array.

            replacer    an optional parameter that determines how object
                        values are stringified for objects. It can be a
                        function or an array of strings.

            space       an optional parameter that specifies the indentation
                        of nested structures. If it is omitted, the text will
                        be packed without extra whitespace. If it is a number,
                        it will specify the number of spaces to indent at each
                        level. If it is a string (such as '\t' or '&nbsp;'),
                        it contains the characters used to indent at each level.

            This method produces a JSON text from a JavaScript value.

            When an object value is found, if the object contains a toJSON
            method, its toJSON method will be called and the result will be
            stringified. A toJSON method does not serialize: it returns the
            value represented by the name/value pair that should be serialized,
            or undefined if nothing should be serialized. The toJSON method
            will be passed the key associated with the value, and this will be
            bound to the value

            For example, this would serialize Dates as ISO strings.

                Date.prototype.toJSON = function (key) {
                    function f(n) {
                        // Format integers to have at least two digits.
                        return n < 10 ? '0' + n : n;
                    }

                    return this.getUTCFullYear()   + '-' +
                         f(this.getUTCMonth() + 1) + '-' +
                         f(this.getUTCDate())      + 'T' +
                         f(this.getUTCHours())     + ':' +
                         f(this.getUTCMinutes())   + ':' +
                         f(this.getUTCSeconds())   + 'Z';
                };

            You can provide an optional replacer method. It will be passed the
            key and value of each member, with this bound to the containing
            object. The value that is returned from your method will be
            serialized. If your method returns undefined, then the member will
            be excluded from the serialization.

            If the replacer parameter is an array of strings, then it will be
            used to select the members to be serialized. It filters the results
            such that only members with keys listed in the replacer array are
            stringified.

            Values that do not have JSON representations, such as undefined or
            functions, will not be serialized. Such values in objects will be
            dropped; in arrays they will be replaced with null. You can use
            a replacer function to replace those with JSON values.
            JSON.stringify(undefined) returns undefined.

            The optional space parameter produces a stringification of the
            value that is filled with line breaks and indentation to make it
            easier to read.

            If the space parameter is a non-empty string, then that string will
            be used for indentation. If the space parameter is a number, then
            the indentation will be that many spaces.

            Example:

            text = JSON.stringify(['e', {pluribus: 'unum'}]);
            // text is '["e",{"pluribus":"unum"}]'


            text = JSON.stringify(['e', {pluribus: 'unum'}], null, '\t');
            // text is '[\n\t"e",\n\t{\n\t\t"pluribus": "unum"\n\t}\n]'

            text = JSON.stringify([new Date()], function (key, value) {
                return this[key] instanceof Date ?
                    'Date(' + this[key] + ')' : value;
            });
            // text is '["Date(---current time---)"]'


        JSON.parse(text, reviver)
            This method parses a JSON text to produce an object or array.
            It can throw a SyntaxError exception.

            The optional reviver parameter is a function that can filter and
            transform the results. It receives each of the keys and values,
            and its return value is used instead of the original value.
            If it returns what it received, then the structure is not modified.
            If it returns undefined then the member is deleted.

            Example:

            // Parse the text. Values that look like ISO date strings will
            // be converted to Date objects.

            myData = JSON.parse(text, function (key, value) {
                var a;
                if (typeof value === 'string') {
                    a =
/^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);
                    if (a) {
                        return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],
                            +a[5], +a[6]));
                    }
                }
                return value;
            });

            myData = JSON.parse('["Date(09/09/2001)"]', function (key, value) {
                var d;
                if (typeof value === 'string' &&
                        value.slice(0, 5) === 'Date(' &&
                        value.slice(-1) === ')') {
                    d = new Date(value.slice(5, -1));
                    if (d) {
                        return d;
                    }
                }
                return value;
            });


    This is a reference implementation. You are free to copy, modify, or
    redistribute.
*/

/*jslint evil: true, regexp: true */

/*members "", "\b", "\t", "\n", "\f", "\r", "\"", JSON, "\\", apply,
    call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,
    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,
    lastIndex, length, parse, prototype, push, replace, slice, stringify,
    test, toJSON, toString, valueOf
*/


// Create a JSON object only if one does not already exist. We create the
// methods in a closure to avoid creating global variables.

var JSON;
if (!JSON) {
    JSON = {};
}

(function () {
    'use strict';

    function f(n) {
        // Format integers to have at least two digits.
        return n < 10 ? '0' + n : n;
    }

    if (typeof Date.prototype.toJSON !== 'function') {

        Date.prototype.toJSON = function (key) {

            return isFinite(this.valueOf())
                ? this.getUTCFullYear()     + '-' +
                    f(this.getUTCMonth() + 1) + '-' +
                    f(this.getUTCDate())      + 'T' +
                    f(this.getUTCHours())     + ':' +
                    f(this.getUTCMinutes())   + ':' +
                    f(this.getUTCSeconds())   + 'Z'
                : null;
        };

        String.prototype.toJSON      =
            Number.prototype.toJSON  =
            Boolean.prototype.toJSON = function (key) {
                return this.valueOf();
            };
    }

    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        gap,
        indent,
        meta = {    // table of character substitutions
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            '"' : '\\"',
            '\\': '\\\\'
        },
        rep;


    function quote(string) {

// If the string contains no control characters, no quote characters, and no
// backslash characters, then we can safely slap some quotes around it.
// Otherwise we must also replace the offending characters with safe escape
// sequences.

        escapable.lastIndex = 0;
        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
            var c = meta[a];
            return typeof c === 'string'
                ? c
                : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
        }) + '"' : '"' + string + '"';
    }


    function str(key, holder) {

// Produce a string from holder[key].

        var i,          // The loop counter.
            k,          // The member key.
            v,          // The member value.
            length,
            mind = gap,
            partial,
            value = holder[key];

// If the value has a toJSON method, call it to obtain a replacement value.

        if (value && typeof value === 'object' &&
                typeof value.toJSON === 'function') {
            value = value.toJSON(key);
        }

// If we were called with a replacer function, then call the replacer to
// obtain a replacement value.

        if (typeof rep === 'function') {
            value = rep.call(holder, key, value);
        }

// What happens next depends on the value's type.

        switch (typeof value) {
        case 'string':
            return quote(value);

        case 'number':

// JSON numbers must be finite. Encode non-finite numbers as null.

            return isFinite(value) ? String(value) : 'null';

        case 'boolean':
        case 'null':

// If the value is a boolean or null, convert it to a string. Note:
// typeof null does not produce 'null'. The case is included here in
// the remote chance that this gets fixed someday.

            return String(value);

// If the type is 'object', we might be dealing with an object or an array or
// null.

        case 'object':

// Due to a specification blunder in ECMAScript, typeof null is 'object',
// so watch out for that case.

            if (!value) {
                return 'null';
            }

// Make an array to hold the partial results of stringifying this object value.

            gap += indent;
            partial = [];

// Is the value an array?

            if (Object.prototype.toString.apply(value) === '[object Array]') {

// The value is an array. Stringify every element. Use null as a placeholder
// for non-JSON values.

                length = value.length;
                for (i = 0; i < length; i += 1) {
                    partial[i] = str(i, value) || 'null';
                }

// Join all of the elements together, separated with commas, and wrap them in
// brackets.

                v = partial.length === 0
                    ? '[]'
                    : gap
                    ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']'
                    : '[' + partial.join(',') + ']';
                gap = mind;
                return v;
            }

// If the replacer is an array, use it to select the members to be stringified.

            if (rep && typeof rep === 'object') {
                length = rep.length;
                for (i = 0; i < length; i += 1) {
                    if (typeof rep[i] === 'string') {
                        k = rep[i];
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            } else {

// Otherwise, iterate through all of the keys in the object.

                for (k in value) {
                    if (Object.prototype.hasOwnProperty.call(value, k)) {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            }

// Join all of the member texts together, separated with commas,
// and wrap them in braces.

            v = partial.length === 0
                ? '{}'
                : gap
                ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}'
                : '{' + partial.join(',') + '}';
            gap = mind;
            return v;
        }
    }

// If the JSON object does not yet have a stringify method, give it one.

    if (typeof JSON.stringify !== 'function') {
        JSON.stringify = function (value, replacer, space) {

// The stringify method takes a value and an optional replacer, and an optional
// space parameter, and returns a JSON text. The replacer can be a function
// that can replace values, or an array of strings that will select the keys.
// A default replacer method can be provided. Use of the space parameter can
// produce text that is more easily readable.

            var i;
            gap = '';
            indent = '';

// If the space parameter is a number, make an indent string containing that
// many spaces.

            if (typeof space === 'number') {
                for (i = 0; i < space; i += 1) {
                    indent += ' ';
                }

// If the space parameter is a string, it will be used as the indent string.

            } else if (typeof space === 'string') {
                indent = space;
            }

// If there is a replacer, it must be a function or an array.
// Otherwise, throw an error.

            rep = replacer;
            if (replacer && typeof replacer !== 'function' &&
                    (typeof replacer !== 'object' ||
                    typeof replacer.length !== 'number')) {
                throw new Error('JSON.stringify');
            }

// Make a fake root object containing our value under the key of ''.
// Return the result of stringifying the value.

            return str('', {'': value});
        };
    }


// If the JSON object does not yet have a parse method, give it one.

    if (typeof JSON.parse !== 'function') {
        JSON.parse = function (text, reviver) {

// The parse method takes a text and an optional reviver function, and returns
// a JavaScript value if the text is a valid JSON text.

            var j;

            function walk(holder, key) {

// The walk method is used to recursively walk the resulting structure so
// that modifications can be made.

                var k, v, value = holder[key];
                if (value && typeof value === 'object') {
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if (v !== undefined) {
                                value[k] = v;
                            } else {
                                delete value[k];
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value);
            }


// Parsing happens in four stages. In the first stage, we replace certain
// Unicode characters with escape sequences. JavaScript handles many characters
// incorrectly, either silently deleting them, or treating them as line endings.

            text = String(text);
            cx.lastIndex = 0;
            if (cx.test(text)) {
                text = text.replace(cx, function (a) {
                    return '\\u' +
                        ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
                });
            }

// In the second stage, we run the text against regular expressions that look
// for non-JSON patterns. We are especially concerned with '()' and 'new'
// because they can cause invocation, and '=' because it can cause mutation.
// But just to be safe, we want to reject all unexpected forms.

// We split the second stage into 4 regexp operations in order to work around
// crippling inefficiencies in IE's and Safari's regexp engines. First we
// replace the JSON backslash pairs with '@' (a non-JSON character). Second, we
// replace all simple value tokens with ']' characters. Third, we delete all
// open brackets that follow a colon or comma or that begin the text. Finally,
// we look to see that the remaining characters are only whitespace or ']' or
// ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.

            if (/^[\],:{}\s]*$/
                    .test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')
                        .replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']')
                        .replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

// In the third stage we use the eval function to compile the text into a
// JavaScript structure. The '{' operator is subject to a syntactic ambiguity
// in JavaScript: it can begin a block or an object literal. We wrap the text
// in parens to eliminate the ambiguity.

                j = eval('(' + text + ')');

// In the optional fourth stage, we recursively walk the new structure, passing
// each name/value pair to a reviver function for possible transformation.

                return typeof reviver === 'function'
                    ? walk({'': j}, '')
                    : j;
            }

// If the text is not JSON parseable, then a SyntaxError is thrown.

            throw new SyntaxError('JSON.parse');
        };
    }
}());

/**
 * jQuery Cookie plugin
 *
 * Copyright (c) 2010 Klaus Hartl (stilbuero.de)
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl.html
 *
 */
jQuery.cookie = function (key, value, options) {

    // key and at least value given, set cookie...
    if (arguments.length > 1 && String(value) !== "[object Object]") {
        options = jQuery.extend({}, options);

        if (value === null || value === undefined) {
            options.expires = -1;
        }

        if (typeof options.expires === 'number') {
            var days = options.expires, t = options.expires = new Date();
            t.setDate(t.getDate() + days);
        }

        value = String(value);

        return (document.cookie = [
            encodeURIComponent(key), '=',
            options.raw ? value : encodeURIComponent(value),
            options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
            options.path ? '; path=' + options.path : '',
            options.domain ? '; domain=' + options.domain : '',
            options.secure ? '; secure' : ''
        ].join(''));
    }

    // key and possibly options given, get cookie...
    options = value || {};
    var result, decode = options.raw ? function (s) { return s; } : decodeURIComponent;
    return (result = new RegExp('(?:^|; )' + encodeURIComponent(key) + '=([^;]*)').exec(document.cookie)) ? decode(result[1]) : null;
};

var BOARD = "table#fiveormore tbody";
var TABLE = "table#fiveormore";
var GAME_OVER_PU = '#gameOverPopup';
var HOW_TO_PLAY_PU = '#howToPlay';
var STONE_COLORS = ["green", "red", "blue", "orange", "purple", "yellow"];
var STONE_SHAPES = {green: "circle.png", red: "star.png", blue: "triangle.png", orange: "square.png", purple: "splat.png", yellow: "diamond.png"};
var SHAPES_ON = true;
var EMPTY = 'empty';
var EMPTY_TD = 'td.' + EMPTY;
var CELL_CONTENT = "";
var CHAIN_LENGTH = 5;
var NUM_NEW_STONES = 3;
var SEARCH_LOOP_LIMIT = 500;
var PATH_ANIMATION_SPEED = 75;
var ANIMATING = false;
var POINTS_FOR_CHAINS = {5: 10, 6: 12, 7: 18, 8: 28, 9: 42};
var UP = 0, RIGHT = 1, DOWN = 2, LEFT = 3;
var ASSERTS_ON = true;
var LOGGING_ON = true;
var TEST_FULL_BOARD = true;
var STATES = {};
var NO_MOVE_MESSAGE = "You can't move there!";
var MSG_BOTTOM_OFFSET = 20;
var RULES_TOP_OFFSET = 20;
var HS_COOKIE = 'gridGameHighScores';
var PREFS_COOKIE = 'gridGamePreferences';
var COOKIE_NAME = 'fiveormore';             // supersedes {HS|PREFS}_COOKIE
var PREFS_DEFAULT = {boardSize: "", shapesOn: false};
var UNIQ_ID_DEFAULT = "unknown";
var LOCAL_HS_DEFAULT = [];
var USERNAME_DEFAULT = "";
var HS_MAX_NAME_LENGTH = 20;
var HS_NUM_DISPLAYED = 10;
var HS_LEADIN = '&nbsp;&nbsp;';
var SMALL_BOARD_CUTOFF = 550;    // height of viewport in pixels, below this use small board
var MEDIUM_BOARD_CUTOFF = 750;
var SIZE = {SMALL: 'small', MEDIUM: 'medium', LARGE: 'large'};
var MESSAGE_ID = {
    NEW_GAME: 1, GAME_FINISHED: 2, PAGE_REFRESHED: 3, 
    VIEW_HIGH_SCORES: 4, ENTERED_HIGH_SCORE: 5, VIEW_RULES: 6, VIEW_ABOUT: 7, 
    PLAY_AGAIN: 8, VIEW_PREFERENCES: 9, BOARD_SIZE_CHANGE: 10
};
var MSG_TXT = ['hitNewGame','gameFinished','pageRefreshed','viewedHighScores',
    'enteredHighScore','viewedRules','viewedAbout','hitPlayAgain',
    'viewedPreferences','changedBoardSize'];

// shared routines

// return random number from 0..n-1
function rand(n) {
    return Math.floor(Math.random() * n);
}

function isEmptyObject(obj) {
    for(var prop in obj) {
        if(obj.hasOwnProperty(prop))
            return false;
    }
    return true;
}

// jquery extensions
jQuery.fn.center = function () {
    var theParent = this.parent();
    this.css("position","absolute");
    this.css("top", (($(theParent).height() - this.outerHeight()) / 2) + $(theParent).scrollTop() + "px");
    this.css("left", (($(theParent).width() - this.outerWidth()) / 2) + $(theParent).scrollLeft() + "px");
    return this;
}

jQuery.fn.centerHorizontal = function () {
    var theParent = this.parent();
    this.css("position","absolute");
    this.css("left", (($(theParent).width() - this.outerWidth()) / 2) + $(theParent).scrollLeft() + "px");
    return this;
}

// center jquery element $over on element $under
// invariant: both elements are children of relative pos $container
// (e.g. body or container)
function centerAbsoluteOnElement($container, $over, $under) {
    var pos = $under.position();
    var left = ($container.width() - $over.outerWidth()) / 2;
    var top = pos.top + ( ($under.outerHeight() - $over.outerHeight() ) / 2 );
    top = top < RULES_TOP_OFFSET ? RULES_TOP_OFFSET : top;
    $over.css({ position: "absolute", top: top + "px", left: left + "px" });
}

function keys(obj) {
    var keys = [];
    for(var key in obj) {
        if (obj.hasOwnProperty(key)) {
            keys.push(key);
        }
    }
    return keys;
}

function messageServer(messageId, uniqId) {
    $.ajax({
        url: 'server.php',
        type: 'POST',
        data: 'q=message&uniqId='+uniqId+'&messageId='+messageId
    });
    _gaq.push(['_trackEvent', 'Interaction', MSG_TXT[messageId-1], uniqId]);
}

function sendScoreToServer(uniqId, username, score) {
    $.ajax({
        url: 'server.php',
        type: 'POST',
        data: 'q=sendHighScore&uniqId='+uniqId+'&username='+username+'&score='+score
    });
}

function getHighScoresFromServer(successFunction) {
    showLoading();
    $.ajax({
        url: 'server.php',
        type: 'POST',
        data: 'q=getHighScores',
        success: function(result) {
            hideLoading();
            successFunction(JSON.parse(result));
        }
    });
}

function showLoading() {
  $("#loading").show();
}

function hideLoading() {
  $("#loading").hide();
}

// production only routines
function assert(condition, message) {
    if (ASSERTS_ON && !condition) {
        console.log("ASSERTION FAIL: " + message);
    }
}

function logMessage(message) {
    if (LOGGING_ON) {
        console.log(message);
    }
}

function CookieHandler() {
    var allData = {};
    var that = this;
            
    this.readPreferences = function() {
        var preferences = getPreferencesFromNewCookie();
        return preferences;
    }
    
    this.savePreferences = function(preferences) {
        readAllData();
        allData.preferences = preferences;
        writeAllData();
    }
    
    this.readLocalHighScores = function() {
        var localHighScores = getLocalHighScoresFromNewCookie();
        if (isDefaultLocalHighScores(localHighScores)) {
            return getLocalHighScoresFromOldCookie();
        }
        return localHighScores;
    }

    this.saveLocalHighScores = function(localHighScores) {
        readAllData();
        allData.localHighScores = localHighScores;
        writeAllData();
    }
    
    this.readUniqId = function() {
        var cookieData = getCookie(COOKIE_NAME);
        if (cookieData && cookieData.uniqId) {
            return cookieData.uniqId;
        }
        return UNIQ_ID_DEFAULT;
    }

    this.saveUniqId = function(uniqId) {
        readAllData();
        allData.uniqId = uniqId;
        writeAllData();
    }
    
    this.readUsername = function() {
        var cookieData = getCookie(COOKIE_NAME);
        if (cookieData && cookieData.username) {
            return cookieData.username;
        }
        return USERNAME_DEFAULT;
    }
    
    this.saveUsername = function(username) {
        readAllData();
        allData.username = username;
        writeAllData();
    }
    
    readAllData();
    
    // adjust uniqId if found pre-existing uniqId in cookie
    if (UNIQ_ID_DEFAULT === allData.uniqId) {
        this.saveUniqId(freshUniqId);
    }
    
    function readAllData() {
        allData.preferences = that.readPreferences();
        allData.localHighScores = that.readLocalHighScores();
        allData.uniqId = that.readUniqId();
        allData.username = that.readUsername();
    }
    
    function writeAllData() {
        assert(allData.preferences, "CookieHandler: writeAllData: preferences not set!");
        assert(allData.localHighScores, "CookieHandler: writeAllData: localHighScores not set!");
        assert(allData.uniqId, "CookieHandler: writeAllData: uniqId not set!");
        assert(allData.username, "CookieHandler: writeAllData: username not set!");
        var encodedData = JSON.stringify(allData, null, 4);
        $.cookie(COOKIE_NAME, encodedData, {path: '/', expires: 365});
    }
    
    // return parsed cookie data, or null if no cookie 'cookieName'
    function getCookie(cookieName) {
        var cookie = $.cookie(cookieName);
        if (cookie != null) {
            var parsedCookieData = JSON.parse(cookie);
            return parsedCookieData;
        }
        return null;
    }
            
    function getPreferencesFromNewCookie() {
        var cookieData = getCookie(COOKIE_NAME);
        if (cookieData && cookieData.preferences && cookieData.preferences.boardSize) {
            if (typeof cookieData.preferences.shapesOn  === "undefined") {
                cookieData.preferences.shapesOn = false;
            }
            return cookieData.preferences;
        }
        return PREFS_DEFAULT;
    }
    
    function getLocalHighScoresFromNewCookie() {
        var cookieData = getCookie(COOKIE_NAME);
        if (cookieData && cookieData.localHighScores) {
            return cookieData.localHighScores;
        }
        return LOCAL_HS_DEFAULT;
    }
    
    function getLocalHighScoresFromOldCookie() {
        var localHighScores = getCookie(HS_COOKIE);
        if (localHighScores) {
            return localHighScores;
        }
        return LOCAL_HS_DEFAULT;
    }

    function isDefaultLocalHighScores(localHighScores) {
        if (localHighScores.length === 0) {
            return true;
        }
        return false;
    }        
};

function PopupController() {
    var states = {
        gameOverPopup: false,
        gameOver: false,
        enterHighScore: false,
        highScoresWrap: false,
        playAgain: false,
        showCloseWindow: false,
        howToPlayPopup: false,
        preferencesPopup: false,
        aboutPopup: false
    }
        
    this.gameOverNoHighScore = function() {
        allOff();
        states.gameOverPopup = true;
        states.gameOver = true;
        states.highScoresWrap = true;
        states.playAgain = true;
        states.showCloseWindow = true;
        callJqueryShowAndHides();
    }
    
    this.gameOverGotHighScore = function(username) {
        allOff();
        states.gameOverPopup = true;
        states.gameOver = true;
        states.enterHighScore = true;
        $('#highScoreName').val(username);
        callJqueryShowAndHides();
    }
    
    this.submittedNameForHighScore = function() {
        allOff();
        states.gameOverPopup = true;
        states.gameOver = true;
        states.highScoresWrap = true;
        states.playAgain = true;
        states.showCloseWindow = true;
        callJqueryShowAndHides();
    }
    
    this.requestedHighScores = function() {
        allOff();
        states.gameOverPopup = true;
        states.highScoresWrap = true;
        states.showCloseWindow = true;
        callJqueryShowAndHides();
    }
    
    this.closeGameOverPopup = function() {
        allOff();
        callJqueryShowAndHides();
    }
    
    this.pressedPlayAgainButton = function() {
        allOff();
        callJqueryShowAndHides();
    }
    
    this.pressedNewGameButton = function() {
        allOff();
        callJqueryShowAndHides();
    }
    
    this.openHowToPlayPopup = function() {
        allOff();
        states.howToPlayPopup = true;
        callJqueryShowAndHides();
    }
    
    this.closeHowToPlayPopup = function() {
        allOff();
        callJqueryShowAndHides();
    }
        
    this.openPreferencesPopup = function() {
        allOff();
        states.preferencesPopup = true;
        callJqueryShowAndHides();
    }
    
    this.closePreferencesPopup = function() {
        allOff();
        callJqueryShowAndHides();
    }
    
    this.openAboutPopup = function() {
        allOff();
        states.aboutPopup = true;
        callJqueryShowAndHides();
    }
    
    this.closeAboutPopup = function() {
        allOff();
        callJqueryShowAndHides();
    }
    
    function callJqueryShowAndHides() {
        if (states.gameOver) {
            $('#gameOver').show();
        }
        else {
            $('#gameOver').hide();
        }
        
        if (states.enterHighScore) {
            $('#enterHighScore').show();
        }
        else {
            $('#enterHighScore').hide();
        }
        
        if (states.highScoresWrap) {
            $('#highScoresWrap').show();
        }
        else {
            $('#highScoresWrap').hide();
        }
        
        if (states.playAgain) {
            $('#playAgain').show();
        }
        else {
            $('#playAgain').hide();
        }
        
        if (states.showCloseWindow) {
            $('#gameOverPopup p.closeText').show();
            $('#gameOverPopup div.closeWindowX').show();
        }
        else {
            $('#gameOverPopup p.closeText').hide();
            $('#gameOverPopup div.closeWindowX').hide();
        }
        
        if (states.gameOverPopup) {
            centerAbsoluteOnElement($('#container'), $(GAME_OVER_PU), $(TABLE));
            $('#gameOverPopup').fadeIn('fast');
        }
        else {
            $('#gameOverPopup').hide();
        }
        
        if (states.howToPlayPopup) {
            centerAbsoluteOnElement($('#container'), $(HOW_TO_PLAY_PU), $(TABLE));
            $(HOW_TO_PLAY_PU).show();
        }
        else {
            $(HOW_TO_PLAY_PU).hide();
        }
        
        if (states.preferencesPopup) {
            centerAbsoluteOnElement($('#container'), $('#preferencesPopup'), $(TABLE));
            $('#preferencesPopup').show();            
        }
        else {
            $('#preferencesPopup').hide();
        }
        
        if (states.aboutPopup) {
            centerAbsoluteOnElement($('#container'), $('#aboutPopup'), $(TABLE));
            $('#aboutPopup').show();
        }
        else {
            $('#aboutPopup').hide();
        }
    }

    function allOff() {
        for (var prop in states) {
            states[prop] = false;
        }
    }
};

function Score() {
    var score = 0;
    $('#score').text(score);
    
    this.getScore = function() {
        return score;
    }
    
    this.clearedChainOfLength = function(chainLength) {
        assert(POINTS_FOR_CHAINS[chainLength] > 0, "Score: unknown chain length: " + chainLength);
        score += POINTS_FOR_CHAINS[chainLength];
        $('#score').text(score);
    }
};

function BoardIndex(rowIdx, colIdx) {
    this.row = rowIdx;
    this.col = colIdx;
    
    this.equals = function(otherBoardIndex) {
        if (undefined === otherBoardIndex) {
            return false;
        }
        
        if (this.row === otherBoardIndex.row && this.col === otherBoardIndex.col) {
            return true;
        }
        return false;
    }
    
    this.getAsJqueryTd = function() {
        var $cell = $(BOARD + ' tr').eq(this.row).find('td').eq(this.col);
        return $cell;
    }
};

BoardIndex.prototype.toString = function() {
    return this.row+","+this.col;
}

function Node($td, ancestor, boardIndex, targetNode) {
    this.$td = $td;
    this.G = ancestor !== null ? ancestor.G + 1 : 0;
    this.ancestor = ancestor;
    this.walkable = false;
    if ($td !== null) {
        this.walkable = this.$td.hasClass(EMPTY);
    }
    var boardIndex = boardIndex;
    assert(!(undefined === boardIndex), "Node: boardIndex not defined!")
    
    this.H = getManhattanDistance(targetNode);
    this.F = this.G + this.H;
    
    this.getBoardIndex = function() {
        return boardIndex;
    }
    
    this.getAdjacentBoardIndex = function(direction) {
        switch(direction) {
            case UP:
                return new BoardIndex(boardIndex.row - 1, boardIndex.col);
            case RIGHT:
                return new BoardIndex(boardIndex.row, boardIndex.col + 1);
            case DOWN:
                return new BoardIndex(boardIndex.row + 1, boardIndex.col);
            case LEFT:
                return new BoardIndex(boardIndex.row, boardIndex.col - 1);
        }
        return null;
    }
    
    this.equals = function(otherNode) {
        if (boardIndex.equals(otherNode.getBoardIndex())) {
            return true;
        }
        return false;
    }
    
    // find L shaped distance between two nodes, vertical + horizontal
    function getManhattanDistance(dest) {
        assert(!(undefined === boardIndex), "boardIndex is undefined!");
        if (dest === null) {
            //logMessage("getManhattanDistance: dest is null, returning 1000");
            return 1000;
        }
        return Math.abs(boardIndex.row - dest.getBoardIndex().row) + 
            Math.abs(boardIndex.col - dest.getBoardIndex().col);
    }
};

Node.prototype.toString = function() {
    return "[Node "+this.getBoardIndex()+" F:"+this.F+" G:"+this.G+" H:"+this.H+" ancestor: "+this.ancestor+"]";
}

/*
    Find matching runs of colors vertically and horizontally.
    If greater than CHAIN_LENGTH set the cells to empty.
    Invariant: classes in td's are colors and each td has exactly
    one class entry (a color or 'empty')
*/
function StoneMatcher(score) {
    
    var score = score;
    var ROWS = 1;
    var COLUMNS = 2;
    var DIAGONAL_RIGHT = 3;
    var DIAGONAL_LEFT = 4;
    var ROW_COUNT = $(BOARD + ' tr').length;
    var COLUMN_COUNT = $(BOARD).find('tr:first td').length;
    var foundColorChain = false;
    var chainsToClear = [];
    var boardMatrix;

    this.findAllColorChains = function() {
        foundColorChain = false;
        chainsToClear = [];
        boardMatrix = getBoardAsMatrix();
        
        searchRowsForColors();
        searchColumnsForColors();
        searchDiagonalsForColors();
        
        clearFoundChains();
        return foundColorChain;
    };
    
    function getBoardAsMatrix() {
        var matrix = [];
        for (var idx = 0; idx < ROW_COUNT;  idx++) {
            matrix.push(getRowColorList(idx));
        }
        return matrix;
    }
    
    function searchRowsForColors() {
        for (var rowNum = 0; rowNum < ROW_COUNT;  rowNum++) {
            var cellList = getRowColorList(rowNum);
            var firstCell = {rowIdx: rowNum, colIdx: 0};
            searchCellListByEachColor(cellList, firstCell, ROWS);
        }
    }
    
    function searchColumnsForColors() {
        for (var columnNum = 0; columnNum < COLUMN_COUNT;  columnNum++) {
            var cellList = getColumnColorList(columnNum);
            var firstCell = {rowIdx: 0, colIdx: columnNum};
            searchCellListByEachColor(cellList, firstCell, COLUMNS);
        }
    }
    
    function searchDiagonalsForColors() {
        searchRightDiagonalsStartingInFirstColumn();
        searchRightDiagonalsStartingInFirstRow();
        searchLeftDiagonalsStartingInFirstRow();
        searchLeftDiagonalsStartingInLastColumn();
    }

    function searchRightDiagonalsStartingInFirstColumn() {
        var lastRowDiagonalPossible = ROW_COUNT - CHAIN_LENGTH;
        for (var rowIdx = 0; rowIdx <= lastRowDiagonalPossible; rowIdx++) {
            var firstCell = {rowIdx: rowIdx, colIdx: 0};
            var cellList = getRightDiagonalColorList(firstCell);
            searchCellListByEachColor(cellList, firstCell, DIAGONAL_RIGHT);
        }
    }
    
    function searchRightDiagonalsStartingInFirstRow() {
        var lastColumnDiagonalPossible = COLUMN_COUNT - CHAIN_LENGTH;
        for (var colIdx = 1; colIdx <= lastColumnDiagonalPossible;  colIdx++) {
            var firstCell = {rowIdx: 0, colIdx: colIdx};
            var cellList = getRightDiagonalColorList(firstCell);
            searchCellListByEachColor(cellList, firstCell, DIAGONAL_RIGHT);
        }
    }
    
    function searchLeftDiagonalsStartingInFirstRow() {
        var firstColumnDiagonalPossible = COLUMN_COUNT - CHAIN_LENGTH;
        for (var colIdx = firstColumnDiagonalPossible; colIdx < COLUMN_COUNT; colIdx++) {
            var firstCell = {rowIdx: 0, colIdx: colIdx};
            var cellList = getLeftDiagonalColorList(firstCell);
            searchCellListByEachColor(cellList, firstCell, DIAGONAL_LEFT);
        }
    }
    
    function searchLeftDiagonalsStartingInLastColumn() {
        var lastRowDiagonalPossible = ROW_COUNT - CHAIN_LENGTH;
        for (var rowIdx = 1; rowIdx <= lastRowDiagonalPossible; rowIdx++) {
            var firstCell = {rowIdx: rowIdx, colIdx: COLUMN_COUNT - 1};
            var cellList = getLeftDiagonalColorList(firstCell);
            searchCellListByEachColor(cellList, firstCell, DIAGONAL_LEFT);
        }
    }

    function getRowColorList(rowNum) {
        var rowColors = $.map($(BOARD + ' tr').eq(rowNum).find('td'), function(cell) {
            return $(cell).attr('class');
        });
        return rowColors;
    }
    
    function getColumnColorList(columnNum) {
        var columnColors = $.map($(BOARD + ' tr td:nth-child(' + (columnNum+1) + ')'), function(cell) {
            return $(cell).attr('class');
        });
        return columnColors;
    }
    
    function getRightDiagonalColorList(firstCell) {
        var cellList = [];
        var rowNum = firstCell.rowIdx;
        var colNum = firstCell.colIdx;
        
        while (rowNum < ROW_COUNT && colNum < COLUMN_COUNT) {
            cellList.push(boardMatrix[rowNum][colNum]);
            rowNum += 1;
            colNum += 1;
        }
        return cellList;
    }
    
    function getLeftDiagonalColorList(firstCell) {
        var cellList = [];
        var rowNum = firstCell.rowIdx;
        var colNum = firstCell.colIdx;
        
        while (rowNum < ROW_COUNT && colNum > -1) {
            cellList.push(boardMatrix[rowNum][colNum]);
            rowNum += 1;
            colNum -= 1;
        }
        return cellList;
    }
    
    function searchCellListByEachColor(cellList, startCell, cellListType) {
        for (var colorIdx = 0; colorIdx < STONE_COLORS.length;  colorIdx++) {
            var searchColor = STONE_COLORS[colorIdx];
            var chain = findLongestChainOfColor(searchColor, cellList);
            if (chain.size >= CHAIN_LENGTH) {
                foundColorChain = true;
                chainsToClear.push({cell: startCell, chain: chain, type: cellListType});
            }
        }
    }
    
    // return: index to start of chain in cellList and the chain size.
    function findLongestChainOfColor(color, cellList) {
        var count = 0;
        var firstStoneIdx = -1;
        var longestChain = {index: -1, size: 0};
        
        for (var stoneIdx = 0; stoneIdx < cellList.length;  stoneIdx++) {
            var stoneMatchesColor = (cellList[stoneIdx] === color);
            var firstStoneInChain = (count === 0);
            if (stoneMatchesColor) {
                if (firstStoneInChain) {
                    firstStoneIdx = stoneIdx;
                }
                count++;
                if (count > longestChain.size) {
                    longestChain.index = firstStoneIdx;
                    longestChain.size = count;
                }
            }
            else {
                count = 0;
            }
        }
        return longestChain;
    }
    
    function clearFoundChains() {
        for (var idx = 0; idx < chainsToClear.length;  idx++) {
            var chainHolder = chainsToClear[idx];
            switch(chainsToClear[idx].type) {
                case COLUMNS: {
                    clearColumnChain(chainHolder.cell.colIdx, chainHolder.chain);
                    break;
                }
                case ROWS: {
                    clearRowChain(chainHolder.cell.rowIdx, chainHolder.chain);
                    break;
                }
                case DIAGONAL_RIGHT: {
                    clearRightDiagonalChain(chainHolder.cell, chainHolder.chain);
                    break;
                }
                case DIAGONAL_LEFT: {
                    clearLeftDiagonalChain(chainHolder.cell, chainHolder.chain);
                    break;
                }
                default: {
                    assert(false, "StoneMatcher.clearFoundChains Unknown type: " + 
                    chainHolder.type)
                }
            }
            score.clearedChainOfLength(chainHolder.chain.size);

        }
    }

    function clearRowChain(rowNum, chain) {
        $.map($(BOARD + ' tr').eq(rowNum).find('td').slice(chain.index, chain.index + chain.size), function(cell) {
            setCellToEmpty($(cell));
        });
    }
    
    function clearColumnChain(columnNum, chain) {
        $.map($(BOARD + ' tr td:nth-child('+(columnNum+1)+')').slice(chain.index, chain.index + chain.size), function(cell) {
            setCellToEmpty($(cell));
        });
    }
    
    function clearRightDiagonalChain(startCell, chain) {
        var rowIdx = startCell.rowIdx + chain.index;
        var colIdx = startCell.colIdx + chain.index;
        for (var idx = 0; idx < chain.size;  idx++) {
            var $cell = $(BOARD + ' tr').eq(rowIdx).find('td').eq(colIdx);
            setCellToEmpty($cell);
            rowIdx++;
            colIdx++;
        }
    }
    
    function clearLeftDiagonalChain(startCell, chain) {
        var rowIdx = startCell.rowIdx + chain.index;
        var colIdx = startCell.colIdx - chain.index;
        for (var idx = 0; idx < chain.size;  idx++) {
            var $cell = $(BOARD + ' tr').eq(rowIdx).find('td').eq(colIdx);
            setCellToEmpty($cell);
            rowIdx++;
            colIdx--;
        }
    }
    
    function setCellToEmpty($cell) {
        $cell.removeClass().addClass(EMPTY);
        $cell.html(CELL_CONTENT);
    }

};

function StoneMaker() {
    
    var previewStoneColors = new Array(NUM_NEW_STONES);
    setPreview();
    
    // add NUM_NEW_STONES stones to board in random empty positions
    // return true on completion, false if no empty positions left afterward
    this.placeStones = function(numEmptySquares) {        
        var boardWillFill= boardWillBeFull(numEmptySquares);
        var squaresToFill = Math.min(NUM_NEW_STONES, numEmptySquares);
        for (var idx = 0; idx < squaresToFill;  idx++) {
            addNewStoneToBoard(numEmptySquares-idx, previewStoneColors[idx]);
        }
        if (!boardWillFill) {
            setPreview();
        }
        return boardWillFill;
    }
    
    function addNewStoneToBoard(numEmptySquares, stoneColor) {
        var emptySquareIndex = rand(numEmptySquares);
        var $cell = $(BOARD).find(EMPTY_TD).eq(emptySquareIndex);
        $cell.removeClass().addClass(stoneColor);
        if (SHAPES_ON) {
            $cell.html('<img src="imgs/'+STONE_SHAPES[stoneColor]+'" />');
        }
        
    }
    
    // set preview stones
    function setPreview() {
        var $previewLis = $('#preview').find('li');
        $previewLis.each(function(idx) {
            previewStoneColors[idx] = getNewStoneColor();
            $(this).removeClass().addClass(previewStoneColors[idx]);
            if (SHAPES_ON) {
                var imgSrc = "imgs/" + STONE_SHAPES[previewStoneColors[idx]];
                $(this).html('<img src='+imgSrc+' />');
            }
            else {
                $(this).html('');
            }
            
        });
    }
    
    function getNewStoneColor() {
        return STONE_COLORS[rand(STONE_COLORS.length)];
    }
    
    function boardWillBeFull(numEmptySquares) {
        return numEmptySquares <= NUM_NEW_STONES;
    }
};

function PathAnimator() {
    
    this.animate = function(boardGame, boardIndexList, colorOfStone, imgSrc) {
        animateStone(boardGame, boardIndexList, 1, colorOfStone, imgSrc);
    }
    
    // recursively traverse boardIndexList
    function animateStone(boardGame, boardIndexList, idx, colorOfStone, imgSrc) {
        if (idx < boardIndexList.length) {
            if (idx > 0) {
                // set previous stone to EMPTY, remove any img
                setStoneColor(boardIndexList[idx-1], EMPTY, '');
            }
            // set current stone to right color and (potentially) image
            setStoneColor(boardIndexList[idx], colorOfStone, imgSrc);
            // set timer for next frame
            setTimeout(function() {
                animateStone(boardGame, boardIndexList, idx+1, colorOfStone, imgSrc);
            }, PATH_ANIMATION_SPEED);
            
        }
        else {
            // base case: end of path, animation finished
            boardGame.animationFinished();
        }
    }
    
    function setStoneColor(boardIndex, color, imgSrc) {
        $cell = boardIndex.getAsJqueryTd();
        $cell.removeClass().addClass(color);
        if (SHAPES_ON) {
            if (imgSrc !== '') {
                $cell.html('<img src='+imgSrc+' />');
            }
            else {
                $cell.html(CELL_CONTENT);
            }
        }
    }
};

// A* search implementation
function PathFinder() {
    
    var $rows = $(BOARD).children('tr');
    var openList = [];
    var closedList = [];
    var startingNode = null;
    var currentNode = null;
    var targetNode = null;
    
    this.search = function($currentTd, $targetTd) {
        openList = [];
        closedList = [];
        
        var endBoardIndex = getBoardIndexFromTd($targetTd);
        targetNode = new Node($targetTd, null, endBoardIndex, null);
        
        var startBoardIndex = getBoardIndexFromTd($currentTd);
        currentNode = new Node($currentTd, null, startBoardIndex, targetNode);
        startingNode = new Node($currentTd, null, startBoardIndex, targetNode);
        openList.push(currentNode);
        
        var path = findPath($targetTd);
        return path;
    }
    
    function findPath($targetTd) {
        // loop until find target or open list is empty (no path)
        var counter = 0;
        while (openList.length > 0) {
            currentNode = popBestFromOpenList();
            
            if (!onNodeList(closedList, currentNode)) {
                closedList.push(currentNode);
            }
            
            if (checkAdjacentNodes()) {
                var pathList = getPathAsBoardIndexListInForwardOrder();
                return pathList;
            }
                            
            counter++;
            if (counter > SEARCH_LOOP_LIMIT) {
                assert(false, "findPath: too many iterations " + counter);
                return false;
            }
        }
        return false; // no path
    }
    
    function getPathAsBoardIndexListInForwardOrder() {
        var node = targetNode;
        var nodeList = [];
        while (node != null) {
            nodeList.unshift(node.getBoardIndex());
            node = node.ancestor;
        }
        return nodeList;
    }
    
    // return true if any adjacent nodes equal target node, else false
    function checkAdjacentNodes() {
        var adjacentNodes = getAdjacentNodes(currentNode);
        for (var direction in adjacentNodes) {
            if (checkAdjacentNode(adjacentNodes[direction])) {
                return true;
            }
        }
        return false;
    }
    
    // return true if adjacentNode is targetNode, else false
    function checkAdjacentNode(adjacentNode) {
        if (adjacentNode.walkable && !onNodeList(closedList, adjacentNode)) {
            if (!onNodeList(openList, adjacentNode)) {
                adjacentNode.ancestor = currentNode;
                openList.push(adjacentNode);
                if (adjacentNode.equals(targetNode)) {
                    // make target node the same object as adjacentNode
                    targetNode = adjacentNode;
                    return true;
                }
            }
            else {
                if (betterPath(adjacentNode, null)) {
                    // TODO: update if found better path
                    // change ancestor
                }
            }
        }
        return false;
    }
    
    // TODO: implement better path check
    function betterPath(node, nodeFromOpenList) {
        return false;
    }
    
    function popBestFromOpenList() {
        var lowestNode = null;
        var lowIndex = -1;
        
        var opnListLen = openList.length;
        
        for (var idx = 0; idx < openList.length;  idx++) {
            if (lowestNode === null || openList[idx].F < lowestNode.F) {
                lowestNode = openList[idx];
                lowIndex = idx;
            }
        }
        openList.splice(lowIndex, 1);
        return lowestNode;
    }
    
    function onNodeList(list, node) {
        for (var idx = 0; idx < list.length;  idx++) {
            if (node.equals(list[idx])) {
                return true;
            }
        }
        return false;
    }
    
    function getAdjacentNodes(node) {
        assert(!(undefined === node), "getAdjacentNodes: node is undefined");
        assert(!(null === node), "getAdjacentNodes: node is null");
        assert(!(undefined === node.getBoardIndex()), "getAdjacentNodes: node.getBoardIndex() is undefined");
        
        var boardIndex = node.getBoardIndex();
        var $up = $rows.eq(boardIndex.row-1).children('td').eq(boardIndex.col);
        if (boardIndex.row === 0) {
            $up = null;
        }
        var $right = $rows.eq(boardIndex.row).children('td').eq(boardIndex.col + 1);
        var $down = $rows.eq(boardIndex.row+1).children('td').eq(boardIndex.col);
        var $left = $rows.eq(boardIndex.row).children('td').eq(boardIndex.col - 1);
        if (boardIndex.col === 0) {
            $left = null;
        }
        return {
            up: new Node($up, node, node.getAdjacentBoardIndex(UP), targetNode),
            right: new Node($right, node, node.getAdjacentBoardIndex(RIGHT), targetNode),
            down: new Node($down, node, node.getAdjacentBoardIndex(DOWN), targetNode),
            left: new Node($left, node, node.getAdjacentBoardIndex(LEFT), targetNode)
        }
    }
    
    function getBoardIndexFromTd($td) {
        return new BoardIndex(
            $td.parent().prevAll('tr').length,
            $td.prevAll('td').length
        );
    }
            
};

function ClickHandlers() {
    
    this.setUp = function(boardGame, highScores, popups, score, cookieHandler) {
        var uniqId = cookieHandler.readUniqId();
        $(HOW_TO_PLAY_PU).hide();
        
        $('#newGame').off('click').click(function(e) {
            messageServer(MESSAGE_ID.NEW_GAME, uniqId);
            popups.closeGameOverPopup();
            boardGame.setNewBoard();
        });
        
        $('#playAgain').off('click').click(function(e) {
            messageServer(MESSAGE_ID.PLAY_AGAIN, uniqId);
            popups.closeGameOverPopup();
            boardGame.setNewBoard();
        });
        
        $('#finish').off('click').click(function(e) {
            boardGame.gameOver();
        });
        
        $('#highScoresButton').off('click').click(function(e) {
            messageServer(MESSAGE_ID.VIEW_HIGH_SCORES, uniqId);
            highScores.generateHighScoresHtml(boardGame.showHighScoresNowServerScoresLoaded);
        });
        
        $('#submitHighScore').off('click').click(function(e) {
            messageServer(MESSAGE_ID.ENTERED_HIGH_SCORE, uniqId);
            highScores.enterNewHighScore(uniqId, $('#highScoreName').val(), score.getScore());
            highScores.displayHighScores({});
            popups.submittedNameForHighScore();
        });
        
        $('#highScoreName').off('keypress').bind('keypress', function(e){
            if ( e.keyCode === 13 ) {
                messageServer(MESSAGE_ID.ENTERED_HIGH_SCORE, uniqId);
                highScores.enterNewHighScore(uniqId, $('#highScoreName').val(), score.getScore());
                highScores.displayHighScores({});
                popups.submittedNameForHighScore();
            }
        });
        
        $('#highScoresWrap').off('click').on('click', 'em', function(e) {
            $('#localScores').hide();
            $('#allTimeScores').hide();
            $('#recentScores').hide();

            switch($(this).attr('class')) {
                case 'allTime': {
                    $('#allTimeScores').show();
                    break;
                }
                case 'recent': {
                    $('#recentScores').show();
                    break;
                }
                case 'local': {
                    $('#localScores').show();
                    break;
                }
                default: {
                    logMessage("ClickHandler: error should not get here!");
                }
            }
        });
        
        $('#showHowToPlay').off('click').click(function(e) {
            messageServer(MESSAGE_ID.VIEW_RULES, uniqId);
            popups.openHowToPlayPopup();
        });
        
        $('#howToPlay div.closeWindowX span, #howToPlay span.closeWindowText').off('click').click(function(e) {
            popups.closeHowToPlayPopup();
        });
        
        $('#showPreferences').off('click').click(function(e) {
            messageServer(MESSAGE_ID.VIEW_PREFERENCES, uniqId);
            popups.openPreferencesPopup();
        });
        
        $('#preferencesPopup div.closeWindowX span, #preferencesPopup span.closeWindowText').off('click').click(function(e) {
            popups.closePreferencesPopup();
        });
        
        $('input[name=boardSize]').off('change').change(function(){
            messageServer(MESSAGE_ID.BOARD_SIZE_CHANGE, uniqId);
            changeBoardSize(this.id);
        });
        
        function changeBoardSize(size) {
            var prefs = cookieHandler.readPreferences();
            prefs.boardSize = size;
            cookieHandler.savePreferences(prefs);
            $(TABLE).removeClass().addClass(size);
        }
        
        $('input[name=shapesOn]').off('change').change(function() {
            if ("on" === this.id) {
                boardGame.turnShapesOn();
            }
            else {
                boardGame.turnShapesOff();
            }
            saveShapesSetting(this.id);
        });
        
        function saveShapesSetting(shapesSetting) {
            var prefs = cookieHandler.readPreferences();
            prefs.shapesOn = shapesSetting === "on" ? true : false;
            SHAPES_ON = prefs.shapesOn;
            cookieHandler.savePreferences(prefs);
        }
        
        if (SHAPES_ON) {
            $('input:radio[name=shapesOn][value=on]').attr('checked', 'checked');
        }
        else {
            $('input:radio[name=shapesOn][value=off]').attr('checked', 'checked');
        }

        $('#showAbout').off('click').click(function(e) {
            messageServer(MESSAGE_ID.VIEW_ABOUT, uniqId);
            popups.openAboutPopup();
        });
        
        $('#aboutPopup div.closeWindowX span, #aboutPopup span.closeWindowText').off('click').click(function(e) {
            popups.closeAboutPopup();
        });
        
        $('#gameOverPopup div.closeWindowX span, #gameOverPopup span.closeWindowText').click(function(e) {
            popups.closeGameOverPopup();
        });
        
        centerAbsoluteOnElement($('#container'), $("#loading"), $(TABLE));
        
        // safety: hide loading gif on ajax stop, in case success func in 
        // getHighScoresFromServer doesn't fire
        $("#loading").ajaxStart(function(){
            //$(this).show();
        }).ajaxStop(function(){
            $(this).hide();
        });
        
    }
    
    
};


function BoardGame() {

    var objSelf = this;
    var pathFinder;
    var stoneMaker;
    var score;
    var stoneMatcher;
    var pathAnimator;
    var animating;
    var popups = new PopupController();
    var clickHandlers = new ClickHandlers();
    var cookieHandler = new CookieHandler();
    var highScores = new HighScores(cookieHandler);

    if (isIe) {
        // workaround for ie no border on empty cells problem; give all cells content (a space)
        CELL_CONTENT = "&nbsp;";
        $("td:empty").html(CELL_CONTENT);
    }

    // set SHAPES_ON to value in cookie at game start
    var prefs = cookieHandler.readPreferences();
    SHAPES_ON = prefs.shapesOn;

    setUpBoard();
    clickHandlers.setUp(objSelf, highScores, popups, score, cookieHandler);
    messageServer(MESSAGE_ID.PAGE_REFRESHED, cookieHandler.readUniqId());

    // position share buttons aligned to H1 tag
    var li = $('h1');
    //$('#sharePanel').css('margin-left', li.position().left + 'px');

    $(BOARD).delegate('td','click', function(e) {
        if (e.type == 'click') {
            boardCellWasClicked($(this));
        }
    });

    this.setNewBoard = function() {
        setUpBoard();
    }

    this.turnShapesOn = function() {
        turnOnShapesForBoardStones();
        turnOnShapesForPreviewStones();
    }

    this.turnShapesOff = function() {
        turnOffShapesForBoardStones();
        turnOffShapesForPreviewStones();
    }

    function turnOnShapesForBoardStones() {
        $(BOARD).find('td').each(function(idx) {
            $(this).removeClass('selected');
            if (!$(this).hasClass(EMPTY)) {
                var color = $(this).attr('class');
                var imgSrc = "imgs/" + STONE_SHAPES[color];
                $(this).html('<img src='+imgSrc+' />');
            }
        });
    }

    function turnOnShapesForPreviewStones() {
        $('#preview').find('li').each(function(idx) {
            var color = $(this).attr('class');
            var imgSrc = "imgs/" + STONE_SHAPES[color];
            $(this).html('<img src='+imgSrc+' />');
        });
    }

    function turnOffShapesForBoardStones() {
        $(BOARD).find('td').html(CELL_CONTENT);
    }

    function turnOffShapesForPreviewStones() {
        $('#preview').find('li').html("");
    }

    // empty board and populate with first stones
    function setUpBoard() {
        setBoardSize();
        score = new Score();
        positionPopupWindows();
        // set cells empty, clear any shapes, but preserve IE nbsp
        $(BOARD).find('td').removeClass().addClass(EMPTY).html(CELL_CONTENT);
        //nearlyFillBoard();
        pathFinder = new PathFinder();
        stoneMaker = new StoneMaker();
        stoneMatcher = new StoneMatcher(score);
        pathAnimator = new PathAnimator();
        clickHandlers.setUp(objSelf, highScores, popups, score, cookieHandler);
        animating = false;
        stoneMaker.placeStones(countEmptySquares());
        popups.closeGameOverPopup();
    }

    // dev class to create a nearly full board for testing
    function nearlyFillBoard() {
        if (TEST_FULL_BOARD) {
            $(BOARD).find('td').each(function(idx) {
                var idx = rand(STONE_COLORS.length);
                $(this).removeClass().addClass(STONE_COLORS[idx]);
                if(rand(10)===0) {
                $(this).removeClass().addClass(EMPTY);
                }
            });
            score.clearedChainOfLength(6);
        }
    }

    function setBoardSize() {
        // first check if a board size preference has been set
        var preferences = cookieHandler.readPreferences();
        if (preferences.boardSize !== PREFS_DEFAULT.boardSize) {
            $(TABLE).removeClass().addClass(preferences.boardSize);
            return;
        }

        // no board size preference, so use best fit size
        var viewportHeightInPx = $(window).height();
        if (viewportHeightInPx < SMALL_BOARD_CUTOFF) {
            $(TABLE).removeClass().addClass(SIZE.SMALL);
        }
        else if (viewportHeightInPx < MEDIUM_BOARD_CUTOFF) {
            $(TABLE).removeClass().addClass(SIZE.MEDIUM);
        }
        else {
            $(TABLE).removeClass().addClass(SIZE.LARGE);
        }
    }

    function positionPopupWindows() {
        popups.closeGameOverPopup();
        $('#messages').centerHorizontal().hide();
    }

    // main game loop, waiting for clicks from user
    function boardCellWasClicked($clickedBoardCell) {
        // no clicks processed while animating moves
        if (!animating) {
            var $currentlySelectedStone = $(BOARD).find('td.selected:first');
            if (playerSelectedAStone($clickedBoardCell)) {
                selectANewStone($currentlySelectedStone, $clickedBoardCell);
            }
            else if (playerSelectedADestination($currentlySelectedStone, $clickedBoardCell)) {
                makeMoveIfPossible($currentlySelectedStone, $clickedBoardCell);
            }
        }

    }

    this.gameOver = function() {
        gameOverWaitForServerResponse();
    }

    this.showHighScoresNowServerScoresLoaded = function(serverScores) {
        highScores.displayHighScores({serverScores: serverScores});
        popups.requestedHighScores();
    }

    function gameOverWaitForServerResponse() {
        messageServer(MESSAGE_ID.GAME_FINISHED, cookieHandler.readUniqId());
        // retrieve highscores from server, call gameOverReentry on success
        getHighScoresFromServer(gameOverReentry);
    }

    function gameOverReentry(serverScores) {
        var finalScore = score.getScore();
        $('#finalScore span').text(finalScore);
        if (highScores.isNewHighScore(serverScores, finalScore)) {
            popups.gameOverGotHighScore(cookieHandler.readUsername());
        }
        else {
            highScores.displayHighScores({serverScores: serverScores});
            popups.gameOverNoHighScore();
        }
    }

    function notifyUser(message) {
        var $msg = $('#messages');
        $('#messages span').text(message);
        $msg.centerHorizontal();

        var tablePos = $(TABLE).position();
        var bottom = tablePos.top + $(TABLE).outerHeight() - MSG_BOTTOM_OFFSET;
        $msg.css({ position: "absolute", top: bottom + "px"});

        $msg.fadeIn('fast');
    }

    function removeNotification() {
        $('#messages:visible').fadeOut('fast');
    }

    function playerSelectedAStone($clickedBoardCell) {
        return !$clickedBoardCell.hasClass(EMPTY);
    }

    function selectANewStone($currentlySelectedStone, $newlySelectedStone) {
        if ($currentlySelectedStone.length) {
            $currentlySelectedStone.removeClass('selected');
        }
        $newlySelectedStone.toggleClass('selected');
        removeNotification();
    }

    function playerSelectedADestination($currentlySelectedStone, $clickedBoardCell) {
        return ($currentlySelectedStone.length === 1 && $clickedBoardCell.hasClass(EMPTY) &&
            !$clickedBoardCell.hasClass('selected'));
    }

    function makeMoveIfPossible($currentlySelectedStone, $destinationBoardCell) {
        var path = pathFinder.search($currentlySelectedStone, $destinationBoardCell);
        if (path) {
            animateMove(path, $currentlySelectedStone, $destinationBoardCell);
            removeNotification();
        }
        else {
            notifyUser(NO_MOVE_MESSAGE);
        }
    }

    function animateMove(path, $currentlySelectedStone, $clickedBoardCell) {
        animating = true;
        $currentlySelectedStone.removeClass('selected');
        var colorOfStone = $currentlySelectedStone.attr('class');
        var imgSrc = getImageSrc($currentlySelectedStone);
        pathAnimator.animate(objSelf, path, colorOfStone, imgSrc);
    }

    function getImageSrc($currentlySelectedStone) {
        var img = $currentlySelectedStone.find('img');
        if (img.length && img.attr('src')) {
            return img.attr('src');
        }
        return '';
    }

    this.animationFinished = function() {
        animating = false;
        checkForMatchesAndPlaceNewStones();
    }

    function checkForMatchesAndPlaceNewStones() {
        var completedColorChain = stoneMatcher.findAllColorChains();

        if (!completedColorChain) {
            stoneMaker.placeStones(countEmptySquares());
            stoneMatcher.findAllColorChains();
            if (boardIsFull()) {
                gameOverWaitForServerResponse();
            }

        }
    }

    function countEmptySquares() {
        return $(BOARD).find(EMPTY_TD).length;
    }

    function boardIsFull() {
        return (countEmptySquares()  === 0);
    }

};

function HighScores(cookieHandler) {
    
    var cookieHandler = cookieHandler;
    var localScores = [];
    var allTimeScores = [];
    var recentScores = [];
    var isLocalHighScore = false;
    var isAllTimeHighScore = false;
    var isRecentHighScore = false;

    // serverScores looks like: {allTime:[[name,score]...[]], recent:[[name,score]...[]]}
    // not json encoded
    this.isNewHighScore = function(freshServerScores, score) {
        if (score === 0) {
            return false;
        }
        setServerScores(freshServerScores);
        loadHighScoresFromCookie();
        isLocalHighScore = isHighScore(localScores, score);
        isAllTimeHighScore = isHighScore(allTimeScores, score);
        isRecentHighScore = isHighScore(recentScores, score);
        return isLocalHighScore || isAllTimeHighScore || isRecentHighScore;
    }
        
    this.generateHighScoresHtml = function(reentryFunction) {
        loadHighScoresFromCookie();
        getHighScoresFromServer(reentryFunction);
    }
    
    this.enterNewHighScore = function(uniqId, name, theScore) {
        if (name === "") {
            sanitisedName = "anonymous";
        }
        else {
            sanitisedName = name;
        }
        
        if (isLocalHighScore) {
            updateHighScoreArray(localScores, sanitisedName, theScore);
            saveHighScoresToCookie();
            cookieHandler.saveUsername(sanitisedName);
        }
                
        if (isAllTimeHighScore) {
            updateHighScoreArray(allTimeScores, sanitisedName, theScore);
        }
        
        if (isRecentHighScore) {
            updateHighScoreArray(recentScores, sanitisedName, theScore);
        }
        
        if (isRecentHighScore || isAllTimeHighScore) {
            // TODO: check live server after db soft link to ../protected/fiveormore.db
            sendScoreToServer(uniqId, sanitisedName, theScore);
        }
        
    }
    
    function updateHighScoreArray(highScoreArray, name, theScore) {
        if (highScoreArray.length >= HS_NUM_DISPLAYED) {
            highScoreArray.pop();
        }
        highScoreArray.push([name, theScore]);
        highScoreArray.sort(compareByScore).reverse();
    }
    
    function saveHighScoresToCookie() {
        cookieHandler.saveLocalHighScores(localScores);
    }
    
    this.displayHighScores = function(opts) {
        if (opts.serverScores) {
            setServerScores(opts.serverScores);
        }
        loadHighScoresFromCookie();
        setHighScoresHtml();
    }
    
    function setServerScores(combinedServerScores) {
        allTimeScores = combinedServerScores["allTime"];
        recentScores = combinedServerScores["recent"];
    }
    
    function setHighScoresHtml() {
        var allTimeBestHtml = getAllTimeBestHtml();
        var recentBestHtml = getRecentBestHtml();
        var localBestHtml = getLocalBestHtml();
        var allScores = 
            '<div id="allTimeScores">\n'+allTimeBestHtml+'</div>\n\n' + 
            '<div id="recentScores">\n'+recentBestHtml+'</div>\n\n' + 
            '<div id="localScores">\n'+localBestHtml+'</div>\n\n';
        $('#highScoresWrap').html(allScores);
        $('#localScores').hide();
        $('#allTimeScores').hide();
    }
    
    function loadHighScoresFromCookie() {
        localScores = cookieHandler.readLocalHighScores();
    }
    
    function isHighScore(highScores, score) {
        if (highScores.length === 0) {
            return true;
        }
        var lastIndex = highScores.length - 1;
        return score > highScores[lastIndex][1] || highScores.length < HS_NUM_DISPLAYED;
    }

    function getLocalBestHtml() {
        var highScores = getHighScoresHtml(localScores, "Local Best");
        highScores += getHighScoreBottomButtonsHtml("All Time Best", "allTime", "Daily Best", "recent");
        return highScores;
    }
    
    function getAllTimeBestHtml() {
        var highScores = getHighScoresHtml(allTimeScores, "All Time Best");
        highScores += getHighScoreBottomButtonsHtml("Daily Best", "recent", "Local Best", "local");
        return highScores;
    }
    
    function getRecentBestHtml() {
        var highScores = getHighScoresHtml(recentScores, "Daily Best");
        highScores += getHighScoreBottomButtonsHtml("All Time Best", "allTime", "Local Best", "local");
        return highScores;
    }
    
    function getHighScoreBottomButtonsHtml(nav1Title, nav1Class, nav2Title, nav2Class) {
        var nav = 
            "<p class='toggleHighScores'><em class='" + nav1Class + "'>" + nav1Title + 
            "</em><em class='" + nav2Class + "'>" + nav2Title + "</em></p>\n";
        return nav;
    }
    function getHighScoresHtml(highScores, title) {
        //highScores.sort(compareByScore).reverse();
        var highScoresHtml = '';
        highScoresHtml += '<h3><span>' + title + '</span></h3>\n';
        highScoresHtml += '<dl>\n';
        var leadin = HS_LEADIN;
        var oneBasedIndex = 1;
        for (var idx = 0; idx < highScores.length;  idx++) {
            highScoresHtml += '<dt>'+leadin+oneBasedIndex+'. '+chopUserName(highScores[idx][0], HS_MAX_NAME_LENGTH)+'</dt>\n';
            highScoresHtml += '<dd>'+highScores[idx][1]+'\n';
            oneBasedIndex += 1;
            if (oneBasedIndex >= 10) {
                leadin = '';
            }
        }
        highScoresHtml += createEmptyHighScoreSlots(oneBasedIndex, highScores);
        highScoresHtml += '</dl>\n';
        return highScoresHtml;
    }
        
    function createEmptyHighScoreSlots(currentOneBasedIndex, highScores) {
        var definitionList = '';
        var leadin = HS_LEADIN;
        var emptyHighScoreSlots = HS_NUM_DISPLAYED - highScores.length;
        var oneBasedIndex = currentOneBasedIndex;
        for (var idx = 0; idx < emptyHighScoreSlots;  idx++) {
            definitionList += '<dt>'+leadin+oneBasedIndex+'.</dt>\n';
            definitionList += '<dd>&nbsp;</dd>\n';
            oneBasedIndex += 1;
            if (oneBasedIndex >= 10) {
                leadin = '';
            }
        }
        return definitionList;
    }
    // compare two highscore entry arrays by score: [name, score]
    function compareByScore(a, b) {
        if (a[1] < b[1]) {
            return -1;
        } 
        else if (a[1] > b[1]) {
            return 1;
        }
        return 0;
    }
    
    function chopUserName(name, maxLength) {
        return name.length <= maxLength ? name : name.slice(0, maxLength);
    }
    
    /* Server high scores */
};

$(document).ready(function() {

    $('.full-width').horizontalNav({});
    $(BOARD+' td.selected').removeClass('selected');
    var board = new BoardGame();

    // TODO: promote
    // TODO: BUG: select a tile & move before anim finsihed can get some classes locked (EMPTY?)
    // result is the tile will not complete a row, and stays highlighted (selected class?)
});

